name: Deploy 🚲 velotraces

on:
  workflow_dispatch:
    inputs:
      confirmed_prod_deployment:
        description: "Deploy to prod? Please confirm!"
        type: boolean
        default: false
        required: true
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Verify production deployment confirmation
        run: |
          echo "inputs.confirmed_prod_deployment ${{ inputs.confirmed_prod_deployment == true }} < deplo"
          echo "github.head_ref ${{ github.head_ref}}"
          echo "github.ref_name ${{ github.ref_name}}"
          echo "github.ref ${{ github.ref}}"
          echo "GITHUB_REF ${GITHUB_REF##*/}"

      - name: Verify production deployment confirmation
        if: ${{ inputs.confirmed_prod_deployment != true }}
        run: |
          echo ꫞ You need to confirm to deploy to production
          exit 1

      - name: checkout trunk 🌳
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies & yarn build ⛮
        run: |
          yarn install --frozen-lockfile
          yarn build --base=/velo/traces/

      - name: Copy Site recursively to remote 𐇐
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "dist/*"
          target: "domains/alix.guillard.fr/public_html/velo/traces/"
          strip_components: 1
          rm: true

      - name: Copy php recursively to remote 𐇵
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "public/datavelo"
          target: "domains/alix.guillard.fr/public_html/data/velo"
          strip_components: 2

      - name: Configure SSH 𐀮
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            Port $SSH_PORT
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_KEY: ${{ secrets.KEY }}
          SSH_HOST: ${{ secrets.HOST }}
          SSH_PORT: ${{ secrets.PORT }}
